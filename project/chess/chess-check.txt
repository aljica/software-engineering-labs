In Piece.java, in addIfOpposite(), we should check whether or not the opposing piece is the King. If so, then we should invoke said King's isAttacked() method, which sets the King's class variable "isBeingAttacked" to true. 

Subsequently, in ChessGame.java, we should have an if-statement in our drop() method which, with each move, checks if either the white or black King is under threat (by checking their respective "isBeingAttacked" class variable. 

And if this is the case, ChessGame.java should also have a method called undoMove() which undoes the last move and updates the game message with "Cannot move there, white/black King in check" [Note that this ought to be used only in the case of a player moving their King to a square that puts the King in check, or does not flee from an existing check].

// IMPORTANT:
One very important thing to check after ChessGame.java checks for whether or not a King is in check, is to also determine whose move it is. For instance, if the black King is checked, and it is black's turn, then there is no reason to undoMove(). Perhaps we actually don't need an undoMove(), because if (as written below), we check ALL possible moves for black such that black is no longer in check, then we can instantly tell the user they cannot make a certain move because it doesn't avoid the check. 

Note that it's a good idea to check all possible moves that black can make to avoid the check, because if we don't, then we don't have any way of checking if the user is in checkmate.
// END IMPORTANT.

// VERY IMPORTANT, I THINK THIS SOLVES THE CHECK PROBLEM
Let's say the black King is standing diagonally behind a black pawn, and the pawn is pinned by a white Bishop. Then, the white Queen checks the black King by placing itself in a diagonal position to the pawn. The pawn is seemingly able to capture the Queen, but it actually can't, because of the pin by the Bishop. If we then, in our attempt to determine whether or not the pawn capture is a viable move to curb the check, perform the capture and update all piece's moves, how can we notice that the Bishop is now attacking the King? Remember, the King's isBeingAttacked variable has already been set to true. Does this mean we should have a second boolean class variable in King.java, called perhaps isStillUnderAttack, which can be set to true when the Bishop attacks the King. In that case, then the addIfOpposite() method in Piece.java should check whether or not the King's isBeingAttacked variable is already set to true, in which case it should set the isStillUnderAttack variable to true instead. After doing so, ChessGame.java will notice it and can instantly reset the variable, and also undo the move through the undoMove() method located inside itself (ChessGame.java), and the pawn capture will not be added to the list of possible moves to curb the check.
// END VERY IMPORTANT SOLUTION


In fact, upon noticing that one of the Kings is in check, ChessGame.java should first of all undo the move which led to the King being checked, but then immediately thereafter perform all possible moves in the given position to determine whether or not the check can be curbed. If not, a checkmate scenario has arisen and the game is to be ruled as over.

Perhaps one way of avoiding to check precisely ALL possible moves to curb the check, is to first of all check if the

1) king can move to a square not under threat
2) attacking piece can be captured, or
3) the attacking piece's path of attack can be blocked.

After determining possible moves to curb the check, said legal moves should be condensed into a class variable belonging not to the pieces, but to the class ChessGame.java. This class variable would ONLY be altered and used if a King is in check.
